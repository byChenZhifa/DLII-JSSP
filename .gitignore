# Used to specify files and directories that the Git version control system should ignore.
# This is helpful for reducing unnecessary file tracking, reducing repository size, and improving efficiency.

# -------------------- Data and other directories --------------------
# data/*: Ignore all files under the data directory.
# !data/demo: But do not ignore the data/demo directory.
data/* 
!data/demo
gif/*
onsite_trans/gif/*
# Ignore all image caches.
cache_figures/ 

# -------------------- Python files --------------------
# Byte-compiled / optimized / DLL files.
# __pycache__/: Ignore Python's compiled cache directory.
# *.py[cod]: Ignore .pyc, .pyo (compiled Python files), and .pyd (Python DLL files).
# *$py.class: Ignore class files generated by Jython.
**__pycache__/
*.py[cod]
*$py.class
*.pyc

# -------------------- C extensions --------------------
*.so

# -------------------- Distribution / packaging --------------------
# .Python: Ignore the Python interpreter of a virtual environment.
# The following directories (like build/, dist/, etc.) are typically generated by Python packaging tools (such as setuptools or wheel) and contain temporary files for project build and distribution.
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Build and Release Folders
bin-debug/
bin-release/
[Oo]bj/
[Bb]in/

# Other files and folders
.settings/

# Executables
*.swf
*.air
*.ipa
*.apk

# -------------------- PyInstaller --------------------
# Configuration files used by PyInstaller to create executables.
# Usually these files are written by a Python script from a template
# before PyInstaller builds the executable, so as to inject date/other infos into it.
*.manifest
*.spec

# -------------------- Installer logs --------------------
# pip-log.txt and pip-delete-this-directory.txt are log files that might be generated by older versions of pip.
pip-log.txt
pip-delete-this-directory.txt

# -------------------- Unit test / coverage reports --------------------
# Directories like htmlcov/ and .tox/, and files like .coverage are generated by test coverage tools.
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# -------------------- Translations --------------------
# *.mo and *.pot are compiled translation files by gettext.
*.mo
*.pot

# -------------------- Frameworks and tools like Django, Flask, Scrapy, Sphinx --------------------
# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# -------------------- Tools and environments like Jupyter, IPython, pyenv, pipenv --------------------
# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
# According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
# However, in cases of collaboration, if having platform-specific dependencies or dependencies
# having no cross-platform support, pipenv may install dependencies that don't work, or not
# install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# -------------------- Environments --------------------
# Virtual environment directories, usually containing a project's private Python interpreter.
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/
